---
# Source: jenkins/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "app.kubernetes.io/component": "jenkins-master"
type: Opaque
data:
  jenkins-admin-password: "{{conf['jenkins']['admin-password'] | decrypt}}"
  jenkins-admin-user: "{{conf['jenkins']['admin-username'] | decrypt}}"

---
# Source: jenkins/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "app.kubernetes.io/component": "jenkins-master"
data:
  config.xml: |-
    <?xml version='1.0' encoding='UTF-8'?>
    <hudson>
      <disabledAdministrativeMonitors/>
      <version>lts</version>
      <numExecutors>0</numExecutors>
      <mode>NORMAL</mode>
      <useSecurity>true</useSecurity>
      <authorizationStrategy class="hudson.security.FullControlOnceLoggedInAuthorizationStrategy">
        <denyAnonymousReadAccess>true</denyAnonymousReadAccess>
      </authorizationStrategy>
      <securityRealm class="hudson.security.LegacySecurityRealm"/>
      <disableRememberMe>false</disableRememberMe>
      <projectNamingStrategy class="jenkins.model.ProjectNamingStrategy$DefaultProjectNamingStrategy"/>
      <workspaceDir>${JENKINS_HOME}/workspace/${ITEM_FULLNAME}</workspaceDir>
      <buildsDir>${ITEM_ROOTDIR}/builds</buildsDir>
      <markupFormatter class="hudson.markup.EscapedMarkupFormatter"/>
      <jdks/>
      <viewsTabBar class="hudson.views.DefaultViewsTabBar"/>
      <myViewsTabBar class="hudson.views.DefaultMyViewsTabBar"/>
      <clouds>
        <org.csanchez.jenkins.plugins.kubernetes.KubernetesCloud plugin="kubernetes@1.18.1">
          <name>kubernetes</name>
          <templates>
            <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
              <inheritFrom></inheritFrom>
              <name>default</name>
              <instanceCap>2147483647</instanceCap>
              <idleMinutes>0</idleMinutes>
              <label>jenkins-slave</label>
              <serviceAccount>default</serviceAccount>
              <nodeSelector></nodeSelector>
                <nodeUsageMode>NORMAL</nodeUsageMode>
              <volumes>
              </volumes>
              <containers>
                <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
                  <name>jnlp</name>
                  <image>jenkins/jnlp-slave:3.29-1-alpine</image>
                  <privileged>false</privileged>
                  <alwaysPullImage>false</alwaysPullImage>
                  <workingDir>/home/jenkins</workingDir>
                  <command></command>
                  <args>${computer.jnlpmac} ${computer.name}</args>
                  <ttyEnabled>false</ttyEnabled>
                  # Resources configuration is a little hacky. This was to prevent breaking
                  # changes, and should be cleanned up in the future once everybody had
                  # enough time to migrate.
                  <resourceRequestCpu>200m</resourceRequestCpu>
                  <resourceRequestMemory>640Mi</resourceRequestMemory>
                  <resourceLimitCpu>500m</resourceLimitCpu>
                  <resourceLimitMemory>1Gi</resourceLimitMemory>
                  <envVars>
                    <org.csanchez.jenkins.plugins.kubernetes.ContainerEnvVar>
                      <key>JENKINS_URL</key>
                      <value>http://jenkins.jenkins.svc.cluster.local:8080</value>
                    </org.csanchez.jenkins.plugins.kubernetes.ContainerEnvVar>
                  </envVars>
                </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
              </containers>
              <envVars>
              </envVars>
              <annotations/>
              <imagePullSecrets/>
              <nodeProperties/>
              <podRetention class="org.csanchez.jenkins.plugins.kubernetes.pod.retention.Default"/>
            </org.csanchez.jenkins.plugins.kubernetes.PodTemplate></templates>
          <serverUrl>https://kubernetes.default</serverUrl>
          <skipTlsVerify>false</skipTlsVerify>
          <namespace>jenkins</namespace>
          <jenkinsUrl>http://jenkins:8080</jenkinsUrl>
          <jenkinsTunnel>jenkins-agent:50000</jenkinsTunnel>
          <containerCap>10</containerCap>
          <retentionTimeout>5</retentionTimeout>
          <connectTimeout>0</connectTimeout>
          <readTimeout>0</readTimeout>
          <podRetention class="org.csanchez.jenkins.plugins.kubernetes.pod.retention.Never"/>
        </org.csanchez.jenkins.plugins.kubernetes.KubernetesCloud>
      </clouds>
      <quietPeriod>5</quietPeriod>
      <scmCheckoutRetryCount>0</scmCheckoutRetryCount>
      <views>
        <hudson.model.AllView>
          <owner class="hudson" reference="../../.."/>
          <name>All</name>
          <filterExecutors>false</filterExecutors>
          <filterQueue>false</filterQueue>
          <properties class="hudson.model.View$PropertyList"/>
        </hudson.model.AllView>
      </views>
      <primaryView>All</primaryView>
      <slaveAgentPort>50000</slaveAgentPort>
      <disabledAgentProtocols>
        <string>JNLP-connect</string>
        <string>JNLP2-connect</string>
      </disabledAgentProtocols>
      <label></label>
      <crumbIssuer class="hudson.security.csrf.DefaultCrumbIssuer">
        <excludeClientIPFromCrumb>true</excludeClientIPFromCrumb>
      </crumbIssuer>
      <nodeProperties/>
      <globalNodeProperties/>
      <noUsageStatistics>true</noUsageStatistics>
    </hudson>
  jenkins.model.JenkinsLocationConfiguration.xml: |-
    <?xml version='1.1' encoding='UTF-8'?>
    <jenkins.model.JenkinsLocationConfiguration>
      <adminAddress></adminAddress>
      <jenkinsUrl>http://jenkins:8080</jenkinsUrl>
    </jenkins.model.JenkinsLocationConfiguration>
  jenkins.CLI.xml: |-
    <?xml version='1.1' encoding='UTF-8'?>
    <jenkins.CLI>
      <enabled>false</enabled>
    </jenkins.CLI>
  apply_config.sh: |-
    mkdir -p /usr/share/jenkins/ref/secrets/;
    echo "false" > /usr/share/jenkins/ref/secrets/slave-to-master-security-kill-switch;
    yes | cp -i /var/jenkins_config/config.xml /var/jenkins_home;
    yes | cp -i /var/jenkins_config/jenkins.CLI.xml /var/jenkins_home;
    yes | cp -i /var/jenkins_config/jenkins.model.JenkinsLocationConfiguration.xml /var/jenkins_home;
    # Install missing plugins
    cp /var/jenkins_config/plugins.txt /var/jenkins_home;
    rm -rf /usr/share/jenkins/ref/plugins/*.lock
    /usr/local/bin/install-plugins.sh `echo $(cat /var/jenkins_home/plugins.txt)`;
    # Copy plugins to shared volume
    yes | cp -i /usr/share/jenkins/ref/plugins/* /var/jenkins_plugins/;
    mkdir -p /var/jenkins_home/casc_configs;
    rm -rf /var/jenkins_home/casc_configs/*
    cp -v /var/jenkins_config/*.yaml /var/jenkins_home/casc_configs
# Only add config to this script if we aren't auto-reloading otherwise the pod will restart upon each config change:
  github-oauth.yaml: |-
    jenkins:
      securityRealm:
        github:
          githubWebUri: "https://github.com"
          githubApiUri: "https://api.github.com"
          clientID: "${GITHUB_CLIENT_ID}"
          clientSecret: "${GITHUB_CLIENT_SECRET}"
          oauthScopes: "read:org,user:email"    
  matrix-auth: |
    jenkins:
      authorizationStrategy:
        projectMatrix:
          grantedPermissions:
          - "Overall/Administer:egovernments*micro-service-devops"
  matrix-authorization-strategy.yaml: |- 
    jenkins:
      authorizationStrategy:
        projectMatrix:
          permissions:
          # Admin
          - "Agent/Build:egovernments*micro-service-devops"
          - "Agent/Configure:egovernments*micro-service-devops"
          - "Agent/Connect:egovernments*micro-service-devops"
          - "Agent/Create:egovernments*micro-service-devops"
          - "Agent/Delete:egovernments*micro-service-devops"
          - "Agent/Disconnect:egovernments*micro-service-devops"
          - "Credentials/Create:egovernments*micro-service-devops"
          - "Credentials/Delete:egovernments*micro-service-devops"
          - "Credentials/ManageDomains:egovernments*micro-service-devops"
          - "Credentials/Update:egovernments*micro-service-devops"
          - "Credentials/View:egovernments*micro-service-devops"
          - "Job/Build:egovernments*micro-service-devops"
          - "Job/Cancel:egovernments*micro-service-devops"
          - "Job/Configure:egovernments*micro-service-devops"
          - "Job/Create:egovernments*micro-service-devops"
          - "Job/Delete:egovernments*micro-service-devops"
          - "Job/Discover:egovernments*micro-service-devops"
          - "Job/Move:egovernments*micro-service-devops"
          - "Job/Read:egovernments*micro-service-devops"
          - "Job/Workspace:egovernments*micro-service-devops"
          - "Overall/Administer:egovernments*micro-service-devops"
          - "Overall/Read:egovernments*micro-service-devops"
          - "Run/Delete:egovernments*micro-service-devops"
          - "Run/Replay:egovernments*micro-service-devops"
          - "Run/Update:egovernments*micro-service-devops"
          - "View/Configure:egovernments*micro-service-devops"
          - "View/Create:egovernments*micro-service-devops"
          - "View/Delete:egovernments*micro-service-devops"
          - "View/Read:egovernments*micro-service-devops"  
          # Devs
          - "Agent/Build:egovernments*micro-service-dev"
          - "Job/Build:egovernments*micro-service-dev"
          - "Job/Cancel:egovernments*micro-service-dev"
          - "Job/Read:egovernments*micro-service-dev"
          - "Job/Workspace:egovernments*micro-service-dev"
          - "Overall/Read:egovernments*micro-service-dev"
          - "Run/Replay:egovernments*micro-service-dev"
          - "View/Read:egovernments*micro-service-dev"           
          # ukd
          - "Agent/Build:egovernments*ukd-uat"
          - "Job/Build:egovernments*ukd-uat"
          - "Job/Cancel:egovernments*ukd-uat"
          - "Job/Read:egovernments*ukd-uat"
          - "Job/Workspace:egovernments*ukd-uat"
          - "Overall/Read:egovernments*ukd-uat"
          - "Run/Replay:egovernments*ukd-uat"
          - "View/Read:egovernments*ukd-uat"
          #Bihar
          - "Agent/Build:egovernments*bihar-uat"
          - "Job/Build:egovernments*bihar-uat"
          - "Job/Cancel:egovernments*bihar-uat"
          - "Job/Read:egovernments*bihar-uat"
          - "Job/Workspace:egovernments*bihar-uat"
          - "Overall/Read:egovernments*bihar-uat"
          - "Run/Replay:egovernments*bihar-uat"
          - "View/Read:egovernments*bihar-uat"
          #Tarranto-dev
          - "Agent/Build:egovernments*tarranto-dev"
          - "Job/Build:egovernments*tarranto-dev"
          - "Job/Cancel:egovernments*tarranto-dev"
          - "Job/Read:egovernments*tarranto-dev"
          - "Job/Workspace:egovernments*tarranto-dev"
          - "Overall/Read:egovernments*tarranto-dev"
          - "Run/Replay:egovernments*tarranto-dev"
          - "View/Read:egovernments*tarranto-dev"
          #tarrento-ws-dev-team
          - "Agent/Build:egovernments*tarrento-ws-dev-team"
          - "Job/Build:egovernments*tarrento-ws-dev-team"
          - "Job/Cancel:egovernments*tarrento-ws-dev-team"
          - "Job/Read:egovernments*tarrento-ws-dev-team"
          - "Job/Workspace:egovernments*tarrento-ws-dev-team"
          - "Overall/Read:egovernments*tarrento-ws-dev-team"
          - "Run/Replay:egovernments*tarrento-ws-dev-team"
          - "View/Read:egovernments*tarrento-ws-dev-team"
          #Frontend-team
          - "Agent/Build:egovernments*egov-web-app"
          - "Job/Build:egovernments*egov-web-app"
          - "Job/Cancel:egovernments*egov-web-app"
          - "Job/Read:egovernments*egov-web-app"
          - "Job/Workspace:egovernments*egov-web-app"
          - "Overall/Read:egovernments*egov-web-app"
          - "Run/Replay:egovernments*egov-web-app"
          - "View/Read:egovernments*egov-web-app"      
          #Walking Tree BPA
          - "Agent/Build:egovernments*wt-ws-dev-team"
          - "Job/Build:egovernments*wt-ws-dev-team"
          - "Job/Cancel:egovernments*wt-ws-dev-team"
          - "Job/Read:egovernments*wt-ws-dev-team"
          - "Job/Workspace:egovernments*wt-ws-dev-team"
          - "Overall/Read:egovernments*wt-ws-dev-team"
          - "Run/Replay:egovernments*wt-ws-dev-team"
          - "View/Read:egovernments*wt-ws-dev-team" 
          #Devops Partner
          - "Agent/Build:egovernments*Devops-partner"
          - "Job/Build:egovernments*Devops-partner"
          - "Job/Cancel:egovernments*Devops-partner"
          - "Job/Read:egovernments*Devops-partner"
          - "Job/Workspace:egovernments*Devops-partner"
          - "Overall/Read:egovernments*Devops-partner"
          - "Run/Replay:egovernments*Devops-partner"
          - "View/Read:egovernments*Devops-partner"                          
  
  credentials.yaml: |-
    credentials:
      system:
        domainCredentials:
          - credentials:
              - basicSSHUserPrivateKey:
                  scope: GLOBAL
                  id: git_read
                  description: "SSH private key file for git checkouts"
                  privateKeySource:
                    directEntry:
                      privateKey: ${GIT_READ_SSH_PRIVATE_KEY}
              - slackCredentials:
                  scope: GLOBAL
                  id: slack-token
                  secret: '${SLACK_TOKEN}'
                  description: Slack token           
          
  welcome-message.yaml: |-
    jenkins:
      systemMessage: Welcome to EGOV CI server.  This Jenkins is configured and managed 'as code'.
      
  plugins.txt: |-
    kubernetes:1.22.3
    workflow-job:2.33
    workflow-aggregator:2.6
    credentials-binding:1.19
    git:3.11.0
    git-parameter:0.9.11
    configuration-as-code:1.32
    pipeline-utility-steps:2.3.0
    job-dsl:1.75
    github-oauth:0.33
    matrix-auth:2.5
    ssh-credentials:1.18
    trilead-api:1.0.5
    authorize-project:1.3.0

---
# Source: jenkins/templates/home-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "app.kubernetes.io/component": "jenkins-master"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"

---
# Source: jenkins/templates/service-account.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "app.kubernetes.io/component": "jenkins-master"


---
# Source: jenkins/templates/rbac.yaml
# This role is used to allow Jenkins scheduling of agents via Kubernetes plugin.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jenkins-schedule-agents
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "app.kubernetes.io/component": "jenkins-master"
rules:
- apiGroups: [""]
  resources: ["pods", "pods/exec", "pods/log"]
  verbs: ["*"]

---

# We bind the role to the Jenkins service account. The role binding is created in the namespace
# where the agents are supposed to run.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins-schedule-agents
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "app.kubernetes.io/component": "jenkins-master"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins-schedule-agents
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: jenkins

---

# Source: jenkins/templates/jenkins-agent-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: jenkins-agent
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "app.kubernetes.io/component": "jenkins-master"
spec:
  ports:
    - port: 50000
      targetPort: 50000
      
      name: slavelistener
  selector:
    "app.kubernetes.io/component": "jenkins-master"
  type: ClusterIP

---
# Source: jenkins/templates/jenkins-master-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "app.kubernetes.io/component": "jenkins-master"
spec:
  ports:
    - port: 8080
      name: http
      targetPort: 8080
      
  selector:
    "app.kubernetes.io/component": "jenkins-master"
  type: LoadBalancer
  
  loadBalancerSourceRanges:
    - 0.0.0.0/0
---
# Source: jenkins/templates/jenkins-master-deployment.yaml

apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "app.kubernetes.io/component": "jenkins-master"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      "app.kubernetes.io/component": "jenkins-master"
  template:
    metadata:
      labels:
        "app.kubernetes.io/name": 'jenkins'
        "app.kubernetes.io/component": "jenkins-master"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: cloud.google.com/gke-preemptible
                operator: DoesNotExist    
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      serviceAccountName: "jenkins"
      initContainers:
        - name: "copy-default-config"
          image: "jenkins/jenkins:2.199-alpine"
          imagePullPolicy: "IfNotPresent"
          command: [ "sh", "/var/jenkins_config/apply_config.sh" ]
          env:
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jenkins
                  key: jenkins-admin-password
            - name: ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: jenkins
                  key: jenkins-admin-user
            - name: GITHUB_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: jenkins-oauth
                  key: clientID
            - name: GITHUB_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: jenkins-oauth
                  key: clientSecret                                                            
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 512Mi
            
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - mountPath: /var/jenkins_home
              name: jenkins-home
            - mountPath: /var/jenkins_config
              name: jenkins-config
            - mountPath: /usr/share/jenkins/ref/plugins
              name: plugins
            - mountPath: /var/jenkins_plugins
              name: plugin-dir
            - mountPath: /usr/share/jenkins/ref/secrets/
              name: secrets-dir
      containers:
        - name: jenkins
          image: "jenkins/jenkins:2.199-alpine"
          imagePullPolicy: "IfNotPresent"
          args: [ "--argumentsRealm.passwd.$(ADMIN_USER)=$(ADMIN_PASSWORD)",  "--argumentsRealm.roles.$(ADMIN_USER)=admin"]
          env:
            - name: JAVA_OPTS
              value: "-Xms2560M -Xmx2560M"
            - name: JENKINS_OPTS
              value: "-Duser.timezone=Asia/Calcutta"
            - name: JENKINS_SLAVE_AGENT_PORT
              value: "50000"
            # - name: ADMIN_PASSWORD
            #   valueFrom:
            #     secretKeyRef:
            #       name: jenkins
            #       key: jenkins-admin-password
            # - name: ADMIN_USER
            #   valueFrom:
            #     secretKeyRef:
            #       name: jenkins
            #       key: jenkins-admin-user
            - name: GITHUB_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: jenkins-oauth
                  key: clientID
            - name: GITHUB_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: jenkins-oauth
                  key: clientSecret      
            - name: GIT_READ_SSH_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: jenkins-credentials
                  key: gitReadSshPrivateKey
            - name: SLACK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: jenkins-credentials
                  key: slackToken                                        
            - name: CASC_JENKINS_CONFIG
              value: "/var/jenkins_home/casc_configs"                  
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 50000
              name: slavelistener
          livenessProbe:
            httpGet:
              path: "/login"
              port: http
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: "/login"
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          resources:
            limits:
              cpu: 2000m
              memory: 4096Mi
            requests:
              cpu: 1000m
              memory: 2560Mi
            
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - mountPath: /var/jenkins_home
              name: jenkins-home
              readOnly: false
            - mountPath: /var/jenkins_config
              name: jenkins-config
              readOnly: true
            - mountPath: /usr/share/jenkins/ref/plugins/
              name: plugin-dir
              readOnly: false
            - mountPath: /usr/share/jenkins/ref/secrets/
              name: secrets-dir
              readOnly: false

      volumes:
      - name: plugins
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      - name: jenkins-config
        configMap:
          name: jenkins
      - name: plugin-dir
        emptyDir: {}
      - name: secrets-dir
        emptyDir: {}
      - name: jenkins-home
        persistentVolumeClaim:
          claimName: jenkins
---

kind: PersistentVolume
apiVersion: v1
metadata:
  name: kaniko-cache-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
    - ReadOnlyMany
  hostPath:
    path: "/tmp/kaniko-cache"          

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: kaniko-cache-claim
  namespace: jenkins
spec:
  accessModes:
  - ReadOnlyMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: manual
  volumeMode: Filesystem
  volumeName: kaniko-cache-volume

---
apiVersion: v1
kind: Secret
metadata:
  name: jenkins-oauth
  namespace: jenkins
type: Opaque
data:
  clientID: "{{conf['jenkins']['github-client-id'] | decrypt}}"
  clientSecret: "{{conf['jenkins']['github-client-secret']  | decrypt}}"
---
apiVersion: v1
kind: Secret
metadata:
  name: jenkins-credentials
  namespace: jenkins
type: Opaque
data:
  gitReadSshPrivateKey: "{{conf['jenkins']['git-read-ssh-private-key'] | decrypt}}"
  gitReadAccessToken: "{{conf['jenkins']['git-read-access-token'] | decrypt}}"  
  dockerUserName: "{{conf['jenkins']['docker-username'] | decrypt}}"  
  dockerPassword: "{{conf['jenkins']['docker-password'] | decrypt}}" 
  slackToken: "{{conf['jenkins']['slack-token'] | decrypt}}"   
